<?php

call_user_func(function() {
    // disable garbage collection
    gc_disable();

    // repress any output from the user scripts
    ob_start();

    $class = '{{ class }}';
    $file = '{{ file }}';
    $subject = '{{ subject }}';
    $revolutions = {{ revolutions }};
    $beforeMethods = {{ beforeMethods }};
    $afterMethods = {{ afterMethods }};
    $bootstrap = '{{ bootstrap }}';
    $parameters = {{ parameters }};
    $warmup = {{ warmup }};

    if ($bootstrap) {
        require_once($bootstrap);
    }

    require_once($file);

    $benchmark = new $class();

    foreach ($beforeMethods as $beforeMethod) {
        $benchmark->$beforeMethod($parameters);
    }

    // warmup if required
    benchmark($benchmark, $subject, $warmup, $parameters);

    $time = benchmark($benchmark, $subject, $revolutions, $parameters);

    foreach ($afterMethods as $afterMethod) {
        $benchmark->$afterMethod($parameters);
    }

    $buffer = ob_get_contents();
    ob_end_clean();

    echo json_encode(array(
        'memory' => memory_get_peak_usage(),
        'time' => $time,
        'buffer' => $buffer,
    ));
});

function benchmark($benchmark, $subject, $revolutions, $parameters)
{
    // run the benchmarks: note that passing arguments to the method slightly increases
    // the calltime, so we explicitly do one thing or the other depending on if parameters
    // are provided.
    if ($parameters) {
        $startTime = microtime(true);

        for ($i = 0; $i < $revolutions; $i++) {
            $benchmark->$subject($parameters);
        }

        $endTime = microtime(true);
    } else {
        $startTime = microtime(true);

        for ($i = 0; $i < $revolutions; $i++) {
            $benchmark->$subject();
        }

        $endTime = microtime(true);
    }

    return ($endTime * 1000000) - ($startTime * 1000000);
}

exit(0);
